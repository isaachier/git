if(__generate_cmdlist)
  return()
endif()
set(__generate_cmdlist 1)

function(generate_cmdlist)
  string(CONCAT cmdlist_content
"/* Automatically generated by cmake/generate-cmdlist.cmake */
struct cmdname_help {
	char name[16];
	char help[80];
	unsigned char group;
};

static const char *common_cmd_groups[] = {")

  set(group_pattern "^([^ ]+)[ ]+(.+)[ ]*$")
  set(command_pattern "^([^ ]+)[ ]+[^ ]+[ ]+([^ ]+)[ ]*$")

  file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/command-list.txt" lines)
  foreach(line ${lines})
    if(line MATCHES "^### common groups")
      set(context "groups")
    elseif(line MATCHES "^### command list")
      set(context "commands")
    endif()

    if(line AND NOT line MATCHES "^#")
      if(context STREQUAL "groups")
        string(REGEX REPLACE "${group_pattern}" "\\1" group "${line}")
        string(REGEX REPLACE "${group_pattern}" "\\2" doc_string "${line}")
        if(group)
          list(APPEND groups "${group}")
          list(APPEND group_docs "${doc_string}")
        endif()
      elseif(context STREQUAL "commands")
        if(line MATCHES "${command_pattern}")
          string(REGEX REPLACE "${command_pattern}" "\\1" command "${line}")
          string(REGEX REPLACE "${command_pattern}" "\\2" group_name "${line}")
          list(APPEND commands "${command}")
          list(APPEND command_group_names "${group_name}")
        endif()
      endif()
    endif()
  endforeach()

  list(LENGTH groups num_groups)
  math(EXPR num_groups "${num_groups} - 1")
  foreach(group_index RANGE ${num_groups})
    list(GET group_docs ${group_index} doc_string)
    set(cmdlist_content "${cmdlist_content}
	N_(\"${doc_string}\"),")
  endforeach()

  set(cmdlist_content "${cmdlist_content}
};

static struct cmdname_help common_cmds[] = {")

  list(LENGTH commands num_commands)
  math(EXPR num_commands "${num_commands} - 1")
  foreach(command_index RANGE ${num_commands})
    list(GET commands ${command_index} command)
    list(GET command_group_names ${command_index} group_name)
    list(FIND groups ${group_name} group_index)
    if(NOT group_index EQUAL -1)
      string(REPLACE "git-" "" command_no_git "${command}")
      file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/Documentation/${command}.txt"
           doc_string
           LIMIT_COUNT 1
           REGEX "^${command} -")
      string(REGEX REPLACE "^${command} - " "" doc_string "${doc_string}")
      set(cmdlist_content "${cmdlist_content}
	{\"${command_no_git}\", N_(\"${doc_string}\"), ${group_index}},")
    endif()
  endforeach()

  set(cmdlist_content "${cmdlist_content}
};
")
  file(GENERATE OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/common-cmds.h"
       CONTENT "${cmdlist_content}")
endfunction()
